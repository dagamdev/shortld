---
interface Props {
  clicks: number
  linkId?: string
}

const { clicks, linkId } = Astro.props
---

<click-chart data-linkid={linkId}
  class="block w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4"
>
  <div class="flex justify-between">
    <div>
      <h5 class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2">{clicks}</h5>
      <p class="text-base font-normal text-gray-500 dark:text-gray-400">Clics en {linkId ? 'tu enlace' : 'tus enlaces'}</p>
    </div>
  </div>
  <div id="area-chart"></div>
</click-chart>

<script>
  import ApexCharts from 'apexcharts'
  import { customFetch } from '@/lib/client'

  interface ClickRes {
    id: string
    createdAt: string
  }

  interface DayData {
    date: string
    clicks: number
  }

  class ClickChart extends HTMLElement {
    constructor() {
      super()

      const linkId = this.dataset.linkid
      
      customFetch(`clicks${linkId === undefined ? '' : '/' + linkId}`).then((data: ClickRes[]) => {
        if ((!Array.isArray(data)) || data.length === 0) return
        
        const clicks = data.slice(-100)
        const clickChartData: DayData[] = []
        const dayTime = 24 * 60 * 60_000
        let targetTime = new Date(clicks[0].createdAt).getTime()
      
        for (const click of clicks) {
          const clickTime = new Date(click.createdAt).getTime()
          const diference = Math.abs(targetTime - clickTime) / dayTime
          const date = new Intl.DateTimeFormat('es-ES', {
            day: 'numeric',
            month: 'numeric'
          }).format(clickTime)

          if (diference > 1) {
            for (let i=1; i<=diference-1; i++) {
              const date = new Intl.DateTimeFormat('es-ES', {
                day: 'numeric',
                month: 'numeric'
              }).format(targetTime + dayTime * i)
              clickChartData.push({
                date,
                clicks: 0
              })
            }
          }
    
          const chartData = clickChartData.find(f => f.date === date)
          if (chartData === undefined) {
            clickChartData.push({
              date,
              clicks: 1
            })
          } else {
            chartData.clicks++
          }

          targetTime = clickTime
        }

        const endClick = clicks.at(-1)
        if (endClick && clickChartData.length < 7) {
          const initialTime = new Date(endClick.createdAt).getTime()
          const turns = 7-clickChartData.length
    
          for (let d=1; d<=turns; d++) {
            const newTime = initialTime + dayTime * d

            if (newTime >= Date.now()) break

            const date = Intl.DateTimeFormat('es-ES', {
              day: 'numeric',
              month: 'numeric'
            }).format(newTime)
    
            clickChartData.push({
              date,
              clicks: 0
            })
          }
        }
    
        if (clickChartData.length < 7) {
          const initialTime = new Date(clicks[0].createdAt).getTime()
          const turns = 7-clickChartData.length
    
          for (let d=1; d<=turns; d++) {
            const newTime = initialTime - dayTime * d
            const date = Intl.DateTimeFormat('es-ES', {
              day: 'numeric',
              month: 'numeric'
            }).format(newTime)
    
            clickChartData.unshift({
              date,
              clicks: 0
            })
          }
        }
    
        const options = {
          chart: {
            type: 'area'
          },
          series: [{
            name: 'sales',
            data: clickChartData.map(c => c.clicks)
          }],
          xaxis: {
            categories: clickChartData.map(d => d.date)
          },
          theme: {
            palette: 'palette2' // upto palette10
          }
        }
      
        const areaChart = this.querySelector("#area-chart")
        if (areaChart && typeof ApexCharts !== 'undefined') {
          const chart = new ApexCharts(areaChart, options);
          chart.render();
        }
      })
    }
  }

  customElements.define('click-chart', ClickChart)
</script>

<style is:global>
  @media (prefers-color-scheme: dark) {
    .apexcharts-tooltip {
      background-color: #1f2937 !important;
      
    }
    
    .apexcharts-tooltip-title {
      background-color: #1f2937 !important;
    }
    
    .apexcharts-xaxistooltip {
      color: #f3f4f6 !important;
      background-color: #1f2937 !important;
    }

    .apexcharts-xaxis-texts-g tspan, .apexcharts-yaxis-texts-g tspan {
      fill: #f3f4f6 !important;
    }
  }
</style>