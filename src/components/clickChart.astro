---
interface Props {
  clicks: number
  linkId?: string
}

const { clicks, linkId } = Astro.props
---

<click-chart data-linkId={linkId}
  class="block w-full bg-white rounded-lg shadow dark:bg-gray-800 p-4"
>
  <div class="flex justify-between">
    <div>
      <h5 class="leading-none text-3xl font-bold text-gray-900 dark:text-white pb-2">{clicks}</h5>
      <p class="text-base font-normal text-gray-500 dark:text-gray-400">Clics en tus enlaces</p>
    </div>
  </div>
  <div id="area-chart"></div>

  <div class="hidden grid grid-cols-1 items-center border-gray-200 border-t dark:border-gray-700 justify-between">
    <div class="flex justify-between items-center pt-5">
      <!-- Button -->
      <button
        id="dropdownDefaultButton"
        data-dropdown-toggle="lastDaysdropdown"
        data-dropdown-placement="bottom"
        class="text-sm font-medium text-gray-500 dark:text-gray-400 hover:text-gray-900 text-center inline-flex items-center dark:hover:text-white"
        type="button">
        Last 7 days
        <svg class="w-2.5 m-2.5 ms-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
        </svg>
      </button>
      <!-- Dropdown menu -->
      <!-- <div id="lastDaysdropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
          <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownDefaultButton">
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Yesterday</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Today</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 7 days</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 30 days</a>
            </li>
            <li>
              <a href="#" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Last 90 days</a>
            </li>
          </ul>
      </div> -->
      <a
        href="#"
        class="uppercase text-sm font-semibold inline-flex items-center rounded-lg text-blue-600 hover:text-blue-700 dark:hover:text-blue-500  hover:bg-gray-100 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700 px-3 py-2">
        Users Report
        <svg class="w-2.5 h-2.5 ms-1.5 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
        </svg>
      </a>
    </div>
  </div>
</click-chart>

<script>
  import ApexCharts from 'apexcharts'
  import { customFetch } from '@/lib/api'
  import type { Click } from '@prisma/client'

  interface ClickRes extends Omit<Click, 'createdAt'> {
    createdAt: string
  }

  interface DayData {
    date: string
    clicks: number
  }

  class ClickChart extends HTMLElement {
    constructor() {
      super()

      const linkId = this.dataset.linkId
      
      customFetch(`clicks${linkId === undefined ? '' : '/' + linkId}`).then((data: ClickRes[]) => {
        const clicks = data.slice(-100)
        const clickChartData: DayData[] = []
        const dayTime = 24 * 60 * 60_000
        let targetTime = new Date(clicks[0].createdAt)
        let targetDay = targetTime.getDay()
      
        for (const [i, click] of clicks.entries()) {
          const clickTime = new Date(click.createdAt)
          const diference = Math.abs(targetDay - clickTime.getDay())
          const date = new Intl.DateTimeFormat('es-ES', {
            day: 'numeric',
            month: 'numeric'
          }).format(clickTime)
    
          const chartData = clickChartData.find(f => f.date === date)
          if (chartData === undefined) {
            clickChartData.push({
              date,
              clicks: 1
            })
          } else {
            chartData.clicks++
          }
    
          if (diference <= 1) {
            targetTime = clickTime
            targetDay = clickTime.getDay()
            continue
          }
          for (let i=0; i<=diference; i++) {
            const date = new Intl.DateTimeFormat('es-ES', {
              day: 'numeric',
              month: 'numeric'
            }).format(clickTime.getTime() + dayTime * i)
            clickChartData.push({
              date,
              clicks: 0
            })
          }
          targetTime = clickTime
          targetDay = clickTime.getDay()
        }
    
        if (clickChartData.length < 7) {
          const initialTime = new Date(clicks[0].createdAt).getTime()
          const turns = 7-clickChartData.length
    
          for (let d=1; d<=turns; d++) {
            const newTime = initialTime - dayTime * d
            const date = Intl.DateTimeFormat('es-ES', {
              day: 'numeric',
              month: 'numeric'
            }).format(newTime)
    
            clickChartData.unshift({
              date,
              clicks: 0
            })
          }
        }
    
        const options = {
          chart: {
            type: 'area'
          },
          series: [{
            name: 'sales',
            data: clickChartData.map(c => c.clicks)
          }],
          xaxis: {
            categories: clickChartData.map(d => d.date)
          },
          theme: {
            palette: 'palette2' // upto palette10
          }
        }
      
        const areaChart = this.querySelector("#area-chart")
        if (areaChart && typeof ApexCharts !== 'undefined') {
          const chart = new ApexCharts(areaChart, options);
          chart.render();
        }
      })
    }
  }

  customElements.define('click-chart', ClickChart)
</script>

<style is:global>
  @media (prefers-color-scheme: dark) {
    .apexcharts-tooltip {
      background-color: #1f2937 !important;
      
    }
    
    .apexcharts-tooltip-title {
      background-color: #1f2937 !important;
    }
    
    .apexcharts-xaxistooltip {
      color: white !important;
      background-color: #1f2937 !important;
    }
  }
</style>